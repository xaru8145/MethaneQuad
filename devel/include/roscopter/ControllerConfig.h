//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the roscopter package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __roscopter__CONTROLLERCONFIG_H__
#define __roscopter__CONTROLLERCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace roscopter
{
  class ControllerConfigStatics;

  class ControllerConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(ControllerConfig &config, const ControllerConfig &max, const ControllerConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const ControllerConfig &config1, const ControllerConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, ControllerConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const ControllerConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, ControllerConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const ControllerConfig &config) const = 0;
      virtual void getValue(const ControllerConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T ControllerConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (ControllerConfig::* field);

      virtual void clamp(ControllerConfig &config, const ControllerConfig &max, const ControllerConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const ControllerConfig &config1, const ControllerConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, ControllerConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const ControllerConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, ControllerConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const ControllerConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const ControllerConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, ControllerConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, ControllerConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<ControllerConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(ControllerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("tau"==(*_i)->name){tau = boost::any_cast<double>(val);}
        if("equilibrium_throttle"==(*_i)->name){equilibrium_throttle = boost::any_cast<double>(val);}
      }
    }

    double tau;
double equilibrium_throttle;

    bool state;
    std::string name;

    class VELOCITY
{
  public:
    VELOCITY()
    {
      state = true;
      name = "Velocity";
    }

    void setParams(ControllerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("x_dot_P"==(*_i)->name){x_dot_P = boost::any_cast<double>(val);}
        if("x_dot_I"==(*_i)->name){x_dot_I = boost::any_cast<double>(val);}
        if("x_dot_D"==(*_i)->name){x_dot_D = boost::any_cast<double>(val);}
        if("y_dot_P"==(*_i)->name){y_dot_P = boost::any_cast<double>(val);}
        if("y_dot_I"==(*_i)->name){y_dot_I = boost::any_cast<double>(val);}
        if("y_dot_D"==(*_i)->name){y_dot_D = boost::any_cast<double>(val);}
        if("z_dot_P"==(*_i)->name){z_dot_P = boost::any_cast<double>(val);}
        if("z_dot_I"==(*_i)->name){z_dot_I = boost::any_cast<double>(val);}
        if("z_dot_D"==(*_i)->name){z_dot_D = boost::any_cast<double>(val);}
      }
    }

    double x_dot_P;
double x_dot_I;
double x_dot_D;
double y_dot_P;
double y_dot_I;
double y_dot_D;
double z_dot_P;
double z_dot_I;
double z_dot_D;

    bool state;
    std::string name;

    
}velocity;

class POSITION
{
  public:
    POSITION()
    {
      state = true;
      name = "Position";
    }

    void setParams(ControllerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("north_P"==(*_i)->name){north_P = boost::any_cast<double>(val);}
        if("north_I"==(*_i)->name){north_I = boost::any_cast<double>(val);}
        if("north_D"==(*_i)->name){north_D = boost::any_cast<double>(val);}
        if("east_P"==(*_i)->name){east_P = boost::any_cast<double>(val);}
        if("east_I"==(*_i)->name){east_I = boost::any_cast<double>(val);}
        if("east_D"==(*_i)->name){east_D = boost::any_cast<double>(val);}
        if("down_P"==(*_i)->name){down_P = boost::any_cast<double>(val);}
        if("down_I"==(*_i)->name){down_I = boost::any_cast<double>(val);}
        if("down_D"==(*_i)->name){down_D = boost::any_cast<double>(val);}
      }
    }

    double north_P;
double north_I;
double north_D;
double east_P;
double east_I;
double east_D;
double down_P;
double down_I;
double down_D;

    bool state;
    std::string name;

    
}position;

class ANGLE
{
  public:
    ANGLE()
    {
      state = true;
      name = "Angle";
    }

    void setParams(ControllerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("psi_P"==(*_i)->name){psi_P = boost::any_cast<double>(val);}
        if("psi_I"==(*_i)->name){psi_I = boost::any_cast<double>(val);}
        if("psi_D"==(*_i)->name){psi_D = boost::any_cast<double>(val);}
      }
    }

    double psi_P;
double psi_I;
double psi_D;

    bool state;
    std::string name;

    
}angle;

class LIMITS
{
  public:
    LIMITS()
    {
      state = true;
      name = "Limits";
    }

    void setParams(ControllerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("max_roll"==(*_i)->name){max_roll = boost::any_cast<double>(val);}
        if("max_pitch"==(*_i)->name){max_pitch = boost::any_cast<double>(val);}
        if("max_yaw_rate"==(*_i)->name){max_yaw_rate = boost::any_cast<double>(val);}
        if("max_throttle"==(*_i)->name){max_throttle = boost::any_cast<double>(val);}
        if("max_n_dot"==(*_i)->name){max_n_dot = boost::any_cast<double>(val);}
        if("max_e_dot"==(*_i)->name){max_e_dot = boost::any_cast<double>(val);}
        if("max_d_dot"==(*_i)->name){max_d_dot = boost::any_cast<double>(val);}
      }
    }

    double max_roll;
double max_pitch;
double max_yaw_rate;
double max_throttle;
double max_n_dot;
double max_e_dot;
double max_d_dot;

    bool state;
    std::string name;

    
}limits;

}groups;



//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double tau;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double equilibrium_throttle;
//#line 12 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double x_dot_P;
//#line 13 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double x_dot_I;
//#line 14 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double x_dot_D;
//#line 16 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double y_dot_P;
//#line 17 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double y_dot_I;
//#line 18 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double y_dot_D;
//#line 20 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double z_dot_P;
//#line 21 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double z_dot_I;
//#line 22 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double z_dot_D;
//#line 25 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double north_P;
//#line 26 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double north_I;
//#line 27 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double north_D;
//#line 29 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double east_P;
//#line 30 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double east_I;
//#line 31 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double east_D;
//#line 33 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double down_P;
//#line 34 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double down_I;
//#line 35 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double down_D;
//#line 38 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double psi_P;
//#line 39 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double psi_I;
//#line 40 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double psi_D;
//#line 43 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double max_roll;
//#line 44 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double max_pitch;
//#line 45 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double max_yaw_rate;
//#line 46 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double max_throttle;
//#line 47 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double max_n_dot;
//#line 48 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double max_e_dot;
//#line 49 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      double max_d_dot;
//#line 228 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("ControllerConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const ControllerConfig &__max__ = __getMax__();
      const ControllerConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const ControllerConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const ControllerConfig &__getDefault__();
    static const ControllerConfig &__getMax__();
    static const ControllerConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const ControllerConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void ControllerConfig::ParamDescription<std::string>::clamp(ControllerConfig &config, const ControllerConfig &max, const ControllerConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class ControllerConfigStatics
  {
    friend class ControllerConfig;

    ControllerConfigStatics()
    {
ControllerConfig::GroupDescription<ControllerConfig::DEFAULT, ControllerConfig> Default("Default", "", 0, 0, true, &ControllerConfig::groups);
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.tau = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.tau = 1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.tau = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("tau", "double", 0, "Dirty Derivative Filter Constant", "", &ControllerConfig::tau)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("tau", "double", 0, "Dirty Derivative Filter Constant", "", &ControllerConfig::tau)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.equilibrium_throttle = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.equilibrium_throttle = 1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.equilibrium_throttle = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("equilibrium_throttle", "double", 0, "Throttle to hold equilibrium altitude (0. to 1.)", "", &ControllerConfig::equilibrium_throttle)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("equilibrium_throttle", "double", 0, "Throttle to hold equilibrium altitude (0. to 1.)", "", &ControllerConfig::equilibrium_throttle)));
ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::VELOCITY, ControllerConfig::DEFAULT> Velocity("Velocity", "", 0, 1, true, &ControllerConfig::DEFAULT::velocity);
//#line 12 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.x_dot_P = 0.0;
//#line 12 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.x_dot_P = 5.0;
//#line 12 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.x_dot_P = 0.0;
//#line 12 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Velocity.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("x_dot_P", "double", 0, "Forward Velocity (Vehicle 1 Frame) Proportional gain", "", &ControllerConfig::x_dot_P)));
//#line 12 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("x_dot_P", "double", 0, "Forward Velocity (Vehicle 1 Frame) Proportional gain", "", &ControllerConfig::x_dot_P)));
//#line 13 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.x_dot_I = 0.0;
//#line 13 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.x_dot_I = 5.0;
//#line 13 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.x_dot_I = 0.0;
//#line 13 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Velocity.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("x_dot_I", "double", 0, "Forward Velocity (Vehicle 1 Frame) Integral gain", "", &ControllerConfig::x_dot_I)));
//#line 13 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("x_dot_I", "double", 0, "Forward Velocity (Vehicle 1 Frame) Integral gain", "", &ControllerConfig::x_dot_I)));
//#line 14 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.x_dot_D = 0.0;
//#line 14 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.x_dot_D = 5.0;
//#line 14 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.x_dot_D = 0.1;
//#line 14 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Velocity.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("x_dot_D", "double", 0, "Forward Velocity (Vehicle 1 Frame) Derivative gain", "", &ControllerConfig::x_dot_D)));
//#line 14 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("x_dot_D", "double", 0, "Forward Velocity (Vehicle 1 Frame) Derivative gain", "", &ControllerConfig::x_dot_D)));
//#line 16 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.y_dot_P = 0.0;
//#line 16 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.y_dot_P = 5.0;
//#line 16 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.y_dot_P = 0.0;
//#line 16 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Velocity.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("y_dot_P", "double", 0, "Right Velocity (Vehicle 1 Frame) Proportional gain", "", &ControllerConfig::y_dot_P)));
//#line 16 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("y_dot_P", "double", 0, "Right Velocity (Vehicle 1 Frame) Proportional gain", "", &ControllerConfig::y_dot_P)));
//#line 17 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.y_dot_I = 0.0;
//#line 17 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.y_dot_I = 5.0;
//#line 17 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.y_dot_I = 0.0;
//#line 17 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Velocity.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("y_dot_I", "double", 0, "Right Velocity (Vehicle 1 Frame) Integral gain", "", &ControllerConfig::y_dot_I)));
//#line 17 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("y_dot_I", "double", 0, "Right Velocity (Vehicle 1 Frame) Integral gain", "", &ControllerConfig::y_dot_I)));
//#line 18 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.y_dot_D = 0.0;
//#line 18 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.y_dot_D = 5.0;
//#line 18 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.y_dot_D = 0.0;
//#line 18 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Velocity.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("y_dot_D", "double", 0, "Right Velocity (Vehicle 1 Frame) Derivative gain", "", &ControllerConfig::y_dot_D)));
//#line 18 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("y_dot_D", "double", 0, "Right Velocity (Vehicle 1 Frame) Derivative gain", "", &ControllerConfig::y_dot_D)));
//#line 20 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.z_dot_P = 0.0;
//#line 20 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.z_dot_P = 5.0;
//#line 20 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.z_dot_P = 0.0;
//#line 20 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Velocity.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("z_dot_P", "double", 0, "Down Velocity (Vehicle 1 Frame) Proportional gain", "", &ControllerConfig::z_dot_P)));
//#line 20 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("z_dot_P", "double", 0, "Down Velocity (Vehicle 1 Frame) Proportional gain", "", &ControllerConfig::z_dot_P)));
//#line 21 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.z_dot_I = 0.0;
//#line 21 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.z_dot_I = 5.0;
//#line 21 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.z_dot_I = 0.0;
//#line 21 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Velocity.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("z_dot_I", "double", 0, "Down Velocity (Vehicle 1 Frame) Integral gain", "", &ControllerConfig::z_dot_I)));
//#line 21 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("z_dot_I", "double", 0, "Down Velocity (Vehicle 1 Frame) Integral gain", "", &ControllerConfig::z_dot_I)));
//#line 22 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.z_dot_D = 0.0;
//#line 22 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.z_dot_D = 5.0;
//#line 22 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.z_dot_D = 0.0;
//#line 22 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Velocity.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("z_dot_D", "double", 0, "Down Velocity (Vehicle 1 Frame) Derivative gain", "", &ControllerConfig::z_dot_D)));
//#line 22 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("z_dot_D", "double", 0, "Down Velocity (Vehicle 1 Frame) Derivative gain", "", &ControllerConfig::z_dot_D)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Velocity.convertParams();
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::VELOCITY, ControllerConfig::DEFAULT>(Velocity)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::VELOCITY, ControllerConfig::DEFAULT>(Velocity)));
ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::POSITION, ControllerConfig::DEFAULT> Position("Position", "", 0, 2, true, &ControllerConfig::DEFAULT::position);
//#line 25 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.north_P = 0.0;
//#line 25 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.north_P = 5.0;
//#line 25 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.north_P = 0.0;
//#line 25 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Position.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("north_P", "double", 0, "North Position Proportional gain", "", &ControllerConfig::north_P)));
//#line 25 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("north_P", "double", 0, "North Position Proportional gain", "", &ControllerConfig::north_P)));
//#line 26 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.north_I = 0.0;
//#line 26 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.north_I = 5.0;
//#line 26 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.north_I = 0.0;
//#line 26 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Position.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("north_I", "double", 0, "North Position Integral gain", "", &ControllerConfig::north_I)));
//#line 26 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("north_I", "double", 0, "North Position Integral gain", "", &ControllerConfig::north_I)));
//#line 27 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.north_D = 0.0;
//#line 27 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.north_D = 5.0;
//#line 27 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.north_D = 0.0;
//#line 27 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Position.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("north_D", "double", 0, "North Position Derivative gain", "", &ControllerConfig::north_D)));
//#line 27 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("north_D", "double", 0, "North Position Derivative gain", "", &ControllerConfig::north_D)));
//#line 29 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.east_P = 0.0;
//#line 29 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.east_P = 5.0;
//#line 29 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.east_P = 0.0;
//#line 29 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Position.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("east_P", "double", 0, "East Position Proportional gain", "", &ControllerConfig::east_P)));
//#line 29 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("east_P", "double", 0, "East Position Proportional gain", "", &ControllerConfig::east_P)));
//#line 30 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.east_I = 0.0;
//#line 30 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.east_I = 5.0;
//#line 30 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.east_I = 0.0;
//#line 30 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Position.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("east_I", "double", 0, "East Position Integral gain", "", &ControllerConfig::east_I)));
//#line 30 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("east_I", "double", 0, "East Position Integral gain", "", &ControllerConfig::east_I)));
//#line 31 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.east_D = 0.0;
//#line 31 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.east_D = 5.0;
//#line 31 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.east_D = 0.0;
//#line 31 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Position.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("east_D", "double", 0, "East Position Derivative gain", "", &ControllerConfig::east_D)));
//#line 31 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("east_D", "double", 0, "East Position Derivative gain", "", &ControllerConfig::east_D)));
//#line 33 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.down_P = 0.0;
//#line 33 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.down_P = 5.0;
//#line 33 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.down_P = 0.0;
//#line 33 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Position.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("down_P", "double", 0, "Altitude Proportional gain", "", &ControllerConfig::down_P)));
//#line 33 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("down_P", "double", 0, "Altitude Proportional gain", "", &ControllerConfig::down_P)));
//#line 34 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.down_I = 0.0;
//#line 34 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.down_I = 5.0;
//#line 34 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.down_I = 0.0;
//#line 34 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Position.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("down_I", "double", 0, "Altitude Integral gain", "", &ControllerConfig::down_I)));
//#line 34 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("down_I", "double", 0, "Altitude Integral gain", "", &ControllerConfig::down_I)));
//#line 35 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.down_D = 0.0;
//#line 35 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.down_D = 5.0;
//#line 35 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.down_D = 0.0;
//#line 35 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Position.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("down_D", "double", 0, "Altitude Derivative gain", "", &ControllerConfig::down_D)));
//#line 35 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("down_D", "double", 0, "Altitude Derivative gain", "", &ControllerConfig::down_D)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Position.convertParams();
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::POSITION, ControllerConfig::DEFAULT>(Position)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::POSITION, ControllerConfig::DEFAULT>(Position)));
ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::ANGLE, ControllerConfig::DEFAULT> Angle("Angle", "", 0, 3, true, &ControllerConfig::DEFAULT::angle);
//#line 38 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.psi_P = 0.0;
//#line 38 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.psi_P = 25.0;
//#line 38 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.psi_P = 0.0;
//#line 38 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Angle.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("psi_P", "double", 0, "Yaw Angle Proportional gain", "", &ControllerConfig::psi_P)));
//#line 38 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("psi_P", "double", 0, "Yaw Angle Proportional gain", "", &ControllerConfig::psi_P)));
//#line 39 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.psi_I = 0.0;
//#line 39 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.psi_I = 25.0;
//#line 39 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.psi_I = 0.0;
//#line 39 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Angle.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("psi_I", "double", 0, "Yaw Angle Integral gain", "", &ControllerConfig::psi_I)));
//#line 39 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("psi_I", "double", 0, "Yaw Angle Integral gain", "", &ControllerConfig::psi_I)));
//#line 40 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.psi_D = 0.0;
//#line 40 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.psi_D = 25.0;
//#line 40 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.psi_D = 0.0;
//#line 40 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Angle.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("psi_D", "double", 0, "Yaw Angle Derivative gain", "", &ControllerConfig::psi_D)));
//#line 40 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("psi_D", "double", 0, "Yaw Angle Derivative gain", "", &ControllerConfig::psi_D)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Angle.convertParams();
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::ANGLE, ControllerConfig::DEFAULT>(Angle)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::ANGLE, ControllerConfig::DEFAULT>(Angle)));
ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::LIMITS, ControllerConfig::DEFAULT> Limits("Limits", "", 0, 4, true, &ControllerConfig::DEFAULT::limits);
//#line 43 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.max_roll = 0.0;
//#line 43 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.max_roll = 1.5619;
//#line 43 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.max_roll = 0.0;
//#line 43 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Limits.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_roll", "double", 0, "Maximum Roll Commanded by Controller (rad)", "", &ControllerConfig::max_roll)));
//#line 43 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_roll", "double", 0, "Maximum Roll Commanded by Controller (rad)", "", &ControllerConfig::max_roll)));
//#line 44 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.max_pitch = 0.0;
//#line 44 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.max_pitch = 1.5619;
//#line 44 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.max_pitch = 0.0;
//#line 44 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Limits.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_pitch", "double", 0, "Maximum Pitch Commanded by Controller (rad)", "", &ControllerConfig::max_pitch)));
//#line 44 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_pitch", "double", 0, "Maximum Pitch Commanded by Controller (rad)", "", &ControllerConfig::max_pitch)));
//#line 45 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.max_yaw_rate = 0.0;
//#line 45 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.max_yaw_rate = 6.825;
//#line 45 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.max_yaw_rate = 0.0;
//#line 45 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Limits.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_yaw_rate", "double", 0, "Maximum Yaw Rate Commanded by Controller (rad/s)", "", &ControllerConfig::max_yaw_rate)));
//#line 45 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_yaw_rate", "double", 0, "Maximum Yaw Rate Commanded by Controller (rad/s)", "", &ControllerConfig::max_yaw_rate)));
//#line 46 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.max_throttle = 0.0;
//#line 46 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.max_throttle = 1.0;
//#line 46 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.max_throttle = 0.0;
//#line 46 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Limits.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_throttle", "double", 0, "Maximum Throttle Commanded by Controller (normalized)", "", &ControllerConfig::max_throttle)));
//#line 46 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_throttle", "double", 0, "Maximum Throttle Commanded by Controller (normalized)", "", &ControllerConfig::max_throttle)));
//#line 47 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.max_n_dot = 0.0;
//#line 47 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.max_n_dot = 45.0;
//#line 47 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.max_n_dot = 0.0;
//#line 47 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Limits.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_n_dot", "double", 0, "Maximum North Velocity Commanded by Controller (m/s)", "", &ControllerConfig::max_n_dot)));
//#line 47 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_n_dot", "double", 0, "Maximum North Velocity Commanded by Controller (m/s)", "", &ControllerConfig::max_n_dot)));
//#line 48 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.max_e_dot = 0.0;
//#line 48 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.max_e_dot = 45.0;
//#line 48 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.max_e_dot = 0.0;
//#line 48 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Limits.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_e_dot", "double", 0, "Maximum East Velocity Commanded by Controller (m/s)", "", &ControllerConfig::max_e_dot)));
//#line 48 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_e_dot", "double", 0, "Maximum East Velocity Commanded by Controller (m/s)", "", &ControllerConfig::max_e_dot)));
//#line 49 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __min__.max_d_dot = 0.0;
//#line 49 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __max__.max_d_dot = 45.0;
//#line 49 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __default__.max_d_dot = 0.0;
//#line 49 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      Limits.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_d_dot", "double", 0, "Maximum Down Velocity Commanded by Controller (m/s)", "", &ControllerConfig::max_d_dot)));
//#line 49 "/home/xaru8145/catkin_ws/src/roscopter/roscopter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_d_dot", "double", 0, "Maximum Down Velocity Commanded by Controller (m/s)", "", &ControllerConfig::max_d_dot)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Limits.convertParams();
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::LIMITS, ControllerConfig::DEFAULT>(Limits)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::LIMITS, ControllerConfig::DEFAULT>(Limits)));
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT, ControllerConfig>(Default)));
//#line 366 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<ControllerConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<ControllerConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<ControllerConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    ControllerConfig __max__;
    ControllerConfig __min__;
    ControllerConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const ControllerConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static ControllerConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &ControllerConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const ControllerConfig &ControllerConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const ControllerConfig &ControllerConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const ControllerConfig &ControllerConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<ControllerConfig::AbstractParamDescriptionConstPtr> &ControllerConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<ControllerConfig::AbstractGroupDescriptionConstPtr> &ControllerConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const ControllerConfigStatics *ControllerConfig::__get_statics__()
  {
    const static ControllerConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = ControllerConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __CONTROLLERRECONFIGURATOR_H__
