// Generated by gencpp from file fcu_common/Status.msg
// DO NOT EDIT!


#ifndef FCU_COMMON_MESSAGE_STATUS_H
#define FCU_COMMON_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace fcu_common
{
template <class ContainerAllocator>
struct Status_
{
  typedef Status_<ContainerAllocator> Type;

  Status_()
    : header()
    , armed(false)
    , failsafe(false)
    , rc_override(false)
    , num_errors(0)
    , loop_time_us(0)  {
    }
  Status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , armed(false)
    , failsafe(false)
    , rc_override(false)
    , num_errors(0)
    , loop_time_us(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _armed_type;
  _armed_type armed;

   typedef uint8_t _failsafe_type;
  _failsafe_type failsafe;

   typedef uint8_t _rc_override_type;
  _rc_override_type rc_override;

   typedef int16_t _num_errors_type;
  _num_errors_type num_errors;

   typedef int16_t _loop_time_us_type;
  _loop_time_us_type loop_time_us;





  typedef boost::shared_ptr< ::fcu_common::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fcu_common::Status_<ContainerAllocator> const> ConstPtr;

}; // struct Status_

typedef ::fcu_common::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::fcu_common::Status > StatusPtr;
typedef boost::shared_ptr< ::fcu_common::Status const> StatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fcu_common::Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fcu_common::Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace fcu_common

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'fcu_common': ['/home/odroid/catkin_ws/src/fcu_common/msg'], 'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::fcu_common::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fcu_common::Status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fcu_common::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fcu_common::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fcu_common::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fcu_common::Status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fcu_common::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4fd0b48adc917c302f3247eed9283190";
  }

  static const char* value(const ::fcu_common::Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4fd0b48adc917c30ULL;
  static const uint64_t static_value2 = 0x2f3247eed9283190ULL;
};

template<class ContainerAllocator>
struct DataType< ::fcu_common::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fcu_common/Status";
  }

  static const char* value(const ::fcu_common::Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fcu_common::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
bool armed 			# True if armed\n\
bool failsafe 		# True if in failsafe\n\
bool rc_override 	# True if RC is in control\n\
int16 num_errors 	# Number of errors\n\
int16 loop_time_us 	# Loop time in us\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::fcu_common::Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fcu_common::Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.armed);
      stream.next(m.failsafe);
      stream.next(m.rc_override);
      stream.next(m.num_errors);
      stream.next(m.loop_time_us);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fcu_common::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fcu_common::Status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "armed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.armed);
    s << indent << "failsafe: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.failsafe);
    s << indent << "rc_override: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rc_override);
    s << indent << "num_errors: ";
    Printer<int16_t>::stream(s, indent + "  ", v.num_errors);
    s << indent << "loop_time_us: ";
    Printer<int16_t>::stream(s, indent + "  ", v.loop_time_us);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FCU_COMMON_MESSAGE_STATUS_H
