// Generated by gencpp from file fcu_common/State.msg
// DO NOT EDIT!


#ifndef FCU_COMMON_MESSAGE_STATE_H
#define FCU_COMMON_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fcu_common
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : position()
    , Va(0.0)
    , alpha(0.0)
    , beta(0.0)
    , phi(0.0)
    , theta(0.0)
    , psi(0.0)
    , chi(0.0)
    , p(0.0)
    , q(0.0)
    , r(0.0)
    , Vg(0.0)
    , wn(0.0)
    , we(0.0)
    , quat()
    , quat_valid(false)
    , chi_deg(0.0)
    , psi_deg(0.0)  {
      position.assign(0.0);

      quat.assign(0.0);
  }
  State_(const ContainerAllocator& _alloc)
    : position()
    , Va(0.0)
    , alpha(0.0)
    , beta(0.0)
    , phi(0.0)
    , theta(0.0)
    , psi(0.0)
    , chi(0.0)
    , p(0.0)
    , q(0.0)
    , r(0.0)
    , Vg(0.0)
    , wn(0.0)
    , we(0.0)
    , quat()
    , quat_valid(false)
    , chi_deg(0.0)
    , psi_deg(0.0)  {
  (void)_alloc;
      position.assign(0.0);

      quat.assign(0.0);
  }



   typedef boost::array<float, 3>  _position_type;
  _position_type position;

   typedef float _Va_type;
  _Va_type Va;

   typedef float _alpha_type;
  _alpha_type alpha;

   typedef float _beta_type;
  _beta_type beta;

   typedef float _phi_type;
  _phi_type phi;

   typedef float _theta_type;
  _theta_type theta;

   typedef float _psi_type;
  _psi_type psi;

   typedef float _chi_type;
  _chi_type chi;

   typedef float _p_type;
  _p_type p;

   typedef float _q_type;
  _q_type q;

   typedef float _r_type;
  _r_type r;

   typedef float _Vg_type;
  _Vg_type Vg;

   typedef float _wn_type;
  _wn_type wn;

   typedef float _we_type;
  _we_type we;

   typedef boost::array<float, 4>  _quat_type;
  _quat_type quat;

   typedef uint8_t _quat_valid_type;
  _quat_valid_type quat_valid;

   typedef float _chi_deg_type;
  _chi_deg_type chi_deg;

   typedef float _psi_deg_type;
  _psi_deg_type psi_deg;





  typedef boost::shared_ptr< ::fcu_common::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fcu_common::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::fcu_common::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::fcu_common::State > StatePtr;
typedef boost::shared_ptr< ::fcu_common::State const> StateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fcu_common::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fcu_common::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace fcu_common

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'fcu_common': ['/home/odroid/catkin_ws/src/fcu_common/msg'], 'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::fcu_common::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fcu_common::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fcu_common::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fcu_common::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fcu_common::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fcu_common::State_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fcu_common::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c8ae256dc92714137a627312899ef106";
  }

  static const char* value(const ::fcu_common::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc8ae256dc9271413ULL;
  static const uint64_t static_value2 = 0x7a627312899ef106ULL;
};

template<class ContainerAllocator>
struct DataType< ::fcu_common::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fcu_common/State";
  }

  static const char* value(const ::fcu_common::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fcu_common::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Vehicle state 'x_hat' output from the estimator or from simulator \n\
\n\
# @warning roll, pitch and yaw have always to be valid, the quaternion is optional\n\
float32[3] position	# north, east, down (m)\n\
float32 Va		# Airspeed (m/s)\n\
float32 alpha		# Angle of attack (rad)\n\
float32 beta		# Slide slip angle (rad)\n\
float32 phi		# Roll angle (rad)\n\
float32 theta		# Pitch angle (rad)\n\
float32 psi		# Yaw angle (rad)\n\
float32 chi		# Course angle (rad)\n\
float32 p		# Body frame rollrate (rad/s)\n\
float32 q		# Body frame pitchrate (rad/s)\n\
float32 r		# Body frame yawrate (rad/s)\n\
float32 Vg		# Groundspeed (m/s)\n\
float32 wn		# Windspeed north component (m/s)\n\
float32 we		# Windspeed east component (m/s)\n\
float32[4] quat		# Quaternion (wxyz, NED)\n\
bool quat_valid		# Quaternion valid\n\
float32 chi_deg		# Wrapped course angle (deg)\n\
float32 psi_deg		# Wrapped yaw angle (deg)\n\
";
  }

  static const char* value(const ::fcu_common::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fcu_common::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.Va);
      stream.next(m.alpha);
      stream.next(m.beta);
      stream.next(m.phi);
      stream.next(m.theta);
      stream.next(m.psi);
      stream.next(m.chi);
      stream.next(m.p);
      stream.next(m.q);
      stream.next(m.r);
      stream.next(m.Vg);
      stream.next(m.wn);
      stream.next(m.we);
      stream.next(m.quat);
      stream.next(m.quat_valid);
      stream.next(m.chi_deg);
      stream.next(m.psi_deg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fcu_common::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fcu_common::State_<ContainerAllocator>& v)
  {
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "Va: ";
    Printer<float>::stream(s, indent + "  ", v.Va);
    s << indent << "alpha: ";
    Printer<float>::stream(s, indent + "  ", v.alpha);
    s << indent << "beta: ";
    Printer<float>::stream(s, indent + "  ", v.beta);
    s << indent << "phi: ";
    Printer<float>::stream(s, indent + "  ", v.phi);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
    s << indent << "psi: ";
    Printer<float>::stream(s, indent + "  ", v.psi);
    s << indent << "chi: ";
    Printer<float>::stream(s, indent + "  ", v.chi);
    s << indent << "p: ";
    Printer<float>::stream(s, indent + "  ", v.p);
    s << indent << "q: ";
    Printer<float>::stream(s, indent + "  ", v.q);
    s << indent << "r: ";
    Printer<float>::stream(s, indent + "  ", v.r);
    s << indent << "Vg: ";
    Printer<float>::stream(s, indent + "  ", v.Vg);
    s << indent << "wn: ";
    Printer<float>::stream(s, indent + "  ", v.wn);
    s << indent << "we: ";
    Printer<float>::stream(s, indent + "  ", v.we);
    s << indent << "quat[]" << std::endl;
    for (size_t i = 0; i < v.quat.size(); ++i)
    {
      s << indent << "  quat[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.quat[i]);
    }
    s << indent << "quat_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.quat_valid);
    s << indent << "chi_deg: ";
    Printer<float>::stream(s, indent + "  ", v.chi_deg);
    s << indent << "psi_deg: ";
    Printer<float>::stream(s, indent + "  ", v.psi_deg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FCU_COMMON_MESSAGE_STATE_H
